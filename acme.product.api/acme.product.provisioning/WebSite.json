{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "storageaccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_ZRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Premium_LRS"
      ]
    },

    "tenantId": {
      "type": "string",
      "defaultValue": "[subscription().tenantId]",
      "metadata": {
        "description": "Tenant Id of the subscription. Get using Get-AzureRmSubscription cmdlet or Get Subscription API"
      }
    },
    "region": {
      "type": "string",
      "defaultValue": "eun",
      "metadata": {
        "description": "Abbreviation of azure region. For ex - eun(North Europe)"
      }
    },
    "env": {
      "type": "string",
      "defaultValue": "feat",
      "metadata": {
        "description": "Th deployment environments. feat,dev,test,staging,perf,prod"
      }
    },
    "objectId": {
      "type": "string",
      "metadata": {
        "description": "Object Id of the AD user. Get using Get-AzureRmADUser or Get-AzureRmADServicePrincipal cmdlets"
      }
    },
    "keysPermissions": {
      "type": "array",
      "defaultValue": [
        "list",
        "get"
      ],
      "metadata": {
        "description": "Permissions to keys in the vault. Valid values are: all, create, import, update, get, list, delete, backup, restore, encrypt, decrypt, wrapkey, unwrapkey, sign, and verify."
      }
    },
    "secretsPermissions": {
      "type": "array",
      "defaultValue": [
        "list",
        "get"
      ],
      "metadata": {
        "description": "Permissions to secrets in the vault. Valid values are: all, get, set, list, and delete."
      }
    }
  },
  "variables": {
    "apiWebSiteName": "[concat('acmepdt', parameters('region'), parameters('env'), 'api-web-app')]",
    "storageaccountName": "[concat('acmepdt', parameters('region'), parameters('env'),'stor')]",
    "UIAppName": "[concat('UIApp', uniqueString(resourceGroup().id))]",
    "offerType": "Standard",
    "databaseAccountName": "[concat('acmepdt', parameters('region'), parameters('env'), 'cosmos')]",
    "keyVaultName": "[concat('acmepdt', parameters('region'), parameters('env'), 'keyvault')]",
    "apiappinsights": "[concat('acmepdt', parameters('region'), parameters('env'), 'appinsights')]",
    "apiHostingPlanName": "[concat('acmepdt', parameters('region'), parameters('env'), 'api-service-plan')]",
    "identityResourceId": "[concat(resourceId('Microsoft.Web/sites', variables('apiWebSiteName')),'/providers/Microsoft.ManagedIdentity/Identities/default')]"
  },
  "resources": [
    {
      "apiVersion": "2015-08-01",
      "name": "[variables('apiHostingPlanName')]",
      "type": "Microsoft.Web/serverfarms",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "API HostingPlan"
      },
      "sku": {
        "name": "S1",
        "capacity": "3"
      },
      "properties": {
        "name": "[variables('apiHostingPlanName')]"
      }
    },
    {
      "apiVersion": "2015-08-01",
      "name": "[variables('apiWebSiteName')]",
      "type": "Microsoft.Web/sites",
      "location": "[resourceGroup().location]",
      "tags": {
        "[concat('hidden-related:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('apiHostingPlanName'))]": "Resource",
        "displayName": "API Website"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms/', variables('apiHostingPlanName'))]"
      ],
      "properties": {
        "name": "[variables('apiWebSiteName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('apiHostingPlanName'))]",
        "httpsOnly": "true",
        "siteConfig": {
          "AlwaysOn": "true"
        }
      },
      "resources": [
        {
          "name": "appsettings",
          "type": "config",
          "apiVersion": "2015-08-01",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('apiWebSiteName'))]",
            "[resourceId('Microsoft.Insights/components', variables('apiappinsights'))]"
          ],
          "tags": {
            "displayName": "app-settings"
          },
          "properties": {
            "APPINSIGHTS_INSTRUMENTATIONKEY": "[reference(resourceId('Microsoft.Insights/components', variables('apiappinsights')), '2014-04-01').InstrumentationKey]",
            "key2": "value2"
          }
        }
      ]
    },
    {
      "apiVersion": "2014-04-01",
      "name": "[concat(variables('apiHostingPlanName'), '-', 'auto-scale-settings')]",
      "type": "Microsoft.Insights/autoscalesettings",
      "location": "[resourceGroup().location]",
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('apiHostingPlanName'))]": "Resource",
        "displayName": "API AutoScaleSettings"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms/', variables('apiHostingPlanName'))]"
      ],
      "properties": {
        "profiles": [
          {
            "name": "Default",
            "capacity": {
              "minimum": 1,
              "maximum": 2,
              "default": 1
            },
            "rules": [
              {
                "metricTrigger": {
                  "metricName": "CpuPercentage",
                  "metricResourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('apiHostingPlanName'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT10M",
                  "timeAggregation": "Average",
                  "operator": "GreaterThan",
                  "threshold": 80.0
                },
                "scaleAction": {
                  "direction": "Increase",
                  "type": "ChangeCount",
                  "value": 1,
                  "cooldown": "PT10M"
                }
              },
              {
                "metricTrigger": {
                  "metricName": "CpuPercentage",
                  "metricResourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('apiHostingPlanName'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT1H",
                  "timeAggregation": "Average",
                  "operator": "LessThan",
                  "threshold": 60.0
                },
                "scaleAction": {
                  "direction": "Decrease",
                  "type": "ChangeCount",
                  "value": 1,
                  "cooldown": "PT1H"
                }
              }
            ]
          }
        ],
        "enabled": false,
        "name": "[concat(variables('apiHostingPlanName'), '-', 'auto-scale-settings')]",
        "targetResourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('apiHostingPlanName'))]"
      }
    },
    {
      "apiVersion": "2014-04-01",
      "name": "[concat('ServerErrors ', variables('apiWebSiteName'))]",
      "type": "Microsoft.Insights/alertrules",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites/', variables('apiWebSiteName'))]"
      ],
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('apiWebSiteName'))]": "Resource",
        "displayName": "ServerErrorsAlertRule"
      },
      "properties": {
        "name": "[concat('ServerErrors ', variables('apiWebSiteName'))]",
        "description": "[concat(variables('apiWebSiteName'), ' has some server errors, status code 5xx.')]",
        "isEnabled": false,
        "condition": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
          "dataSource": {
            "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
            "resourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('apiWebSiteName'))]",
            "metricName": "Http5xx"
          },
          "operator": "GreaterThan",
          "threshold": 0.0,
          "windowSize": "PT5M"
        },
        "action": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
          "sendToServiceOwners": true,
          "customEmails": []
        }
      }
    },
    {
      "apiVersion": "2014-04-01",
      "name": "[concat('ForbiddenRequests ', variables('apiWebSiteName'))]",
      "type": "Microsoft.Insights/alertrules",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites/', variables('apiWebSiteName'))]"
      ],
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('apiWebSiteName'))]": "Resource",
        "displayName": "ForbiddenRequestsAlertRule"
      },
      "properties": {
        "name": "[concat('ForbiddenRequests ', variables('apiWebSiteName'))]",
        "description": "[concat(variables('apiWebSiteName'), ' has some requests that are forbidden, status code 403.')]",
        "isEnabled": false,
        "condition": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
          "dataSource": {
            "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
            "resourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('apiWebSiteName'))]",
            "metricName": "Http403"
          },
          "operator": "GreaterThan",
          "threshold": 0,
          "windowSize": "PT5M"
        },
        "action": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
          "sendToServiceOwners": true,
          "customEmails": []
        }
      }
    },
    {
      "apiVersion": "2014-04-01",
      "name": "[concat('CPUHigh ', variables('apiHostingPlanName'))]",
      "type": "Microsoft.Insights/alertrules",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms/', variables('apiHostingPlanName'))]"
      ],
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('apiHostingPlanName'))]": "Resource",
        "displayName": "CPUHighAlertRule"
      },
      "properties": {
        "name": "[concat('CPUHigh ', variables('apiHostingPlanName'))]",
        "description": "[concat('The average CPU is high across all the instances of ', variables('apiHostingPlanName'))]",
        "isEnabled": false,
        "condition": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
          "dataSource": {
            "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
            "resourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('apiHostingPlanName'))]",
            "metricName": "CpuPercentage"
          },
          "operator": "GreaterThan",
          "threshold": 90,
          "windowSize": "PT15M"
        },
        "action": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
          "sendToServiceOwners": true,
          "customEmails": []
        }
      }
    },
    {
      "apiVersion": "2014-04-01",
      "name": "[concat('LongHttpQueue ', variables('apiHostingPlanName'))]",
      "type": "Microsoft.Insights/alertrules",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms/', variables('apiHostingPlanName'))]"
      ],
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('apiHostingPlanName'))]": "Resource",
        "displayName": "LongHttpQueueAlertRule"
      },
      "properties": {
        "name": "[concat('LongHttpQueue ', variables('apiHostingPlanName'))]",
        "description": "[concat('The HTTP queue for the instances of ', variables('apiHostingPlanName'), ' has a large number of pending requests.')]",
        "isEnabled": false,
        "condition": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
          "dataSource": {
            "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
            "resourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('apiHostingPlanName'))]",
            "metricName": "HttpQueueLength"
          },
          "operator": "GreaterThan",
          "threshold": 100.0,
          "windowSize": "PT5M"
        },
        "action": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
          "sendToServiceOwners": true,
          "customEmails": []
        }
      }
    },
    {
      "apiVersion": "2014-04-01",
      "name": "[variables('apiappinsights')]",
      "type": "Microsoft.Insights/components",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites/', variables('apiWebSiteName'))]"
      ],
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('apiWebSiteName'))]": "Resource",
        "displayName": "AppInsightsComponent"
      },
      "properties": {
        "applicationId": "[variables('apiWebSiteName')]"
      }
    },

    {
      "name": "[variables('storageaccountName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[resourceGroup().location]",
      "apiVersion": "2016-01-01",
      "sku": {
        "name": "[parameters('storageaccountType')]"
      },
      "dependsOn": [],
      "tags": {
        "displayName": "storageaccount"
      },
      "kind": "Storage"
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "name": "[variables('keyVaultName')]",
      "apiVersion": "2016-10-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "enabledForDeployment": "false",
        "enabledForDiskEncryption": "false",
        "enabledForTemplateDeployment": "true",
        "tenantId": "[reference(variables('identityResourceId'), '2015-08-31-PREVIEW').tenantId]",
        "accessPolicies": [
          {
            "tenantId": "[reference(variables('identityResourceId'), '2015-08-31-PREVIEW').tenantId]",
            "objectId": "[reference(variables('identityResourceId'), '2015-08-31-PREVIEW').principalId]",
            "permissions": {
              "keys": "[parameters('keysPermissions')]",
              "secrets": "[parameters('secretsPermissions')]"
            }
          },
          {
            "tenantId": "[reference(variables('identityResourceId'), '2015-08-31-PREVIEW').tenantId]",
            "objectId": "[parameters('objectId')]",
            "permissions": {
              "keys": "[parameters('keysPermissions')]",
              "secrets": "[parameters('secretsPermissions')]"
            }
          }
        ],
        "sku": {
          "name": "Standard",
          "family": "A"
        },
        "dependsOn": [
          "[concat('Microsoft.Web/sites/', variables('apiWebSiteName'))]"
        ]
      },
      "resources": [
        {
          "type": "secrets",
          "name": "cosmossecret",
          "apiVersion": "2015-06-01",
          "tags": {
            "displayName": "secret"
          },
          "properties": {
            "value": "[concat('mongodb://', variables('databaseAccountName'), ':',listKeys(resourceId('Microsoft.DocumentDb/databaseAccounts', variables('databaseAccountName')), '2015-04-08').primaryMasterKey, '@', variables('databaseAccountName'), '.documents.azure.com:10250/?ssl=true') ]"
          },
          "dependsOn": [
            "[concat('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
            "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('databaseAccountName'))]"
          ]
        }
      ]
    },
    //{
    //  "name": "[parameters('UIHostingPlanName')]",
    //  "type": "Microsoft.Web/serverfarms",
    //  "location": "[resourceGroup().location]",
    //  "apiVersion": "2015-08-01",
    //  "sku": {
    //    "name": "[parameters('UIHostingPlanSkuName')]"
    //  },
    //  "dependsOn": [],
    //  "tags": {
    //    "displayName": "UIHostingPlan"
    //  },
    //  "properties": {
    //    "name": "[parameters('UIHostingPlanName')]",
    //    "numberOfWorkers": 1
    //  }
    //},
    //{
    //  "name": "[variables('UIAppName')]",
    //  "type": "Microsoft.Web/sites",
    //  "location": "[resourceGroup().location]",
    //  "apiVersion": "2015-08-01",
    //  "dependsOn": [
    //    "[resourceId('Microsoft.Web/serverfarms', parameters('UIHostingPlanName'))]"
    //  ],
    //  "tags": {
    //    "[concat('hidden-related:', resourceId('Microsoft.Web/serverfarms', parameters('UIHostingPlanName')))]": "Resource",
    //    "displayName": "UIApp"
    //  },
    //  "properties": {
    //    "name": "[variables('UIAppName')]",
    //    "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('UIHostingPlanName'))]"
    //  }
    //},
    {
      "apiVersion": "2015-04-08",
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "kind": "MongoDB",
      "name": "[variables('databaseAccountName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "name": "[variables('databaseAccountName')]",
        "databaseAccountOfferType": "[variables('offerType')]"
      },
      "tags": {
        "defaultExperience": "MongoDB"
      }
    }
    //{
    //  "apiVersion": "2015-11-01",
    //  "type": "Microsoft.Network/trafficManagerProfiles",
    //  "name": "trafficManagerDemo",
    //  "location": "global",
    //  "dependsOn": [
    //  ],
    //  "properties": {
    //    "profileStatus": "Enabled",
    //    "trafficRoutingMethod": "Priority",
    //    "dnsConfig": {
    //      "relativeName": "[parameters('dnsName')]",
    //      "ttl": 30
    //    },
    //    "monitorConfig": {
    //      "protocol": "HTTP",
    //      "port": 80,
    //      "path": "/"
    //    },
    //    "endpoints": [
    //      {
    //        "name": "endpoint1",
    //        "type": "Microsoft.Network/trafficManagerProfiles/azureEndpoints",
    //        "properties": {
    //          "targetResourceId": "[reference('webServer1').outputs.ipId.value]",
    //          "endpointStatus": "Enabled",
    //          "weight": 1
    //        }
    //      }
    //    ]
    //  }
    //},
  ],
  "outputs": {
    "apiAppName": {
      "value": "[variables('apiWebSiteName')]",
      "type": "string"
    },
    "apiappinsightsAppId": {
      "value": "[reference(resourceId('Microsoft.Insights/components', variables('apiappinsights')), '2014-04-01').AppId]",
      "type": "string"
    },
    "apiappinsights": {
      "value": "[variables('apiappinsights')]",
      "type": "string"
    },
    "keyvaultname": {
      "value": "[variables('keyVaultName')]",
      "type": "string"
    }
  }
}